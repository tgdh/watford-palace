@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
	var homePage = CurrentPage.Site();
	var settings = homePage.FirstChild("Settings");
	int count = 0;
	var list = CurrentPage.featuredContent;
}

<div class="c-card-grid clearfix">
	@foreach( var id in list.Split(',') )
	{
		var item = Umbraco.Content(id);
		string docType = item.DocumentTypeAlias;

		switch(docType)
		{
			case "LatestNews":
				@LatestNews(item, count)
			break;
			case "Announcement":
				@Announcement(item)
			break;
			case "Event":
				@Event(item)
			break;
			case "GeneralNews":
				@NewsArticle(item)
			break;
			case "PressRelease":
				@NewsArticle(item)
			break;
			case "InTheMedia":
				@NewsArticle(item)
			break;
			default:
				@Default(item)
			break;
		}
		if( docType == "LatestNews" ){
			count = count + 1;
		}
	}
</div>

@helper LatestNews(dynamic item, int count)
{
	var homePage = item.Site();
	var news = homePage.FirstChild("News");
	var article = news.Children().OrderBy("ReleaseDate desc").Skip(count).Take(1).FirstOrDefault();

	if (article == null) {
		return;
	}

	@Html.Partial("~/Views/Partials/Component/Card.cshtml", new CardViewModel {
		Suptitle = "News",
		Headline = article.HasValue("postTitle") ? article.postTitle : article.Name,
		Subtitle = article.releaseDate.ToString("dd MMM"),
		ImageId = article.thumbnail,
		Url =  article.Url,
		PrimaryButtonUrl = article.Url,
		PrimaryButtonText = "Read more"
	})
}

@helper Announcement(dynamic item)
{
	@Html.Partial("~/Views/Partials/Component/Card.cshtml", new CardViewModel {
		Suptitle = item.mainlabel,
		Headline = item.title,
		Subtitle = item.secondaryLabel,
		ImageId = item.backgroundImage,
		Url = item.link.url,
		PrimaryButtonUrl = item.link.url,
		PrimaryButtonText = item.buttonText
	})
}

@helper Event(dynamic item) {
	var ci = new System.Globalization.CultureInfo("en-GB");
	System.Threading.Thread.CurrentThread.CurrentCulture = ci;
	System.Threading.Thread.CurrentThread.CurrentUICulture = ci;
    var now = DateTime.Today;

	var count = 0;
	var multidate = item.multidate;
	foreach( var date in multidate ){
	    count = count + 1;
	}
	int last = count - 1;

	var subtitle = "";
	if( multidate.ToString() != "" ){
		if( count > 1 ){
			if( DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM") != DateTime.Parse( multidate[last].date.value.ToString()  ).ToString("d MMM") ){
				subtitle = DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM") + "-" + DateTime.Parse( multidate[last].date.value.ToString()  ).ToString("d MMM");
			} else {
				subtitle = DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM");
			}
		} else {
			subtitle = DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM");
		}
	}

	@Html.Partial("~/Views/Partials/Component/Card.cshtml", new CardViewModel {
		Suptitle = item.Parent().Name,
		Headline = item.title,
		Subtitle = subtitle,
		ImageId = item.tileImage,
		Url = item.Url,
		PrimaryButtonUrl = item.Url + "#tickets",
		PrimaryButtonText = "Buy tickets",
		SecondaryButtonUrl = item.Url,
		SecondaryButtonText = "More info",
		ModifierClass = "c-card-grid__item"
	})
}

@helper NewsArticle(dynamic item)
{
	var isInTheMedia = item.DocumentTypeAlias == "InTheMedia";

	@Html.Partial("~/Views/Partials/Component/Card.cshtml", new CardViewModel {
		Suptitle = "News",
		Headline = item.HasValue("postTitle") ? item.postTitle : item.Name,
		Subtitle = item.releaseDate.ToString("dd MMM"),
		ImageId = item.thumbnail,
		Url = isInTheMedia ? item.articleUrl : item.Url,
		PrimaryButtonUrl = isInTheMedia ? item.articleUrl : item.Url,
		PrimaryButtonText = "Read more",
		IsPrimaryButtonUrlExternal = isInTheMedia ? true : false,
		ModifierClass = "c-card-grid__item"
	})

}

@helper LatestNewsOld(dynamic item, int count)
{
	var homePage = item.Site();
	var news = homePage.FirstChild("News");
	var article = news.Children().OrderBy("ReleaseDate desc").Skip(count).Take(1).FirstOrDefault();
	var color = "bondi-blue";

	if (article == null) {
		return;
	}

	if( article.HasValue("color") )
	{
		color = article.color.ToLower().Replace(" ","-");
	}

	var imageId = article.thumbnail.ToString();
	string imageUrl = ( imageId != "" ? Umbraco.Media( imageId ).GetCropUrl("umbracoFile", "gallery") : "" );

	<article class="o-card o-card--news o-card--fill">
		<div class="o-card__image--wrap @color">
			@if( article.HasValue("thumbnail") )
			{
				<img class="o-card__image" src="@imageUrl" alt="@item.Name"/>
			}
		</div>
		<div class="o-card__content">
			<span class="o-card-info--category o-card-info--category--news">News</span>
			<h3 class="o-card__heading o-card__heading--news delta">@(article.HasValue("postTitle") ? article.postTitle : article.Name)</h3>
			<span class="o-card-info--date o-card-info--date--news">@article.releaseDate.ToString("dd MMM")</span>
		</div>
		<a href="@article.Url" class="o-card-link"></a>
		<div class="o-card__actions">
			<a href="@article.Url" class="o-button o-button--small o-button--transparent">Read more</a>
		</div>
	</article>

}

@helper AnnouncementOld(dynamic item)
{
	var announcement = item;
	var color = "bondi-blue";
	var cardType = "o-card--fill";
	if( announcement.HasValue("backgroundImage") )
	{
		cardType = "o-card--image";
	}
	if( announcement.HasValue("color") )
	{
		color = announcement.color.ToLower().Replace(" ","-");
	}
	if( announcement.Name != "" )
	{
		<article class="o-card o-card--event @cardType">
			<div class="o-card__image--wrap @color">
			@if( announcement.HasValue("backgroundImage") )
			{
				<img class="o-card__image" src="@Umbraco.Media(announcement.backgroundImage).GetCropUrl("umbracoFile", "gallery")" alt="@announcement.title"/>
			}
			</div>
			<div class="o-card__content">
				<span class="o-card-info o-card-info--category o-card-info--category--announcement">@announcement.mainlabel</span>
				<h3 class="o-card__heading o-card__heading--announcement delta">@announcement.title</h3>
				<span class="o-card-info o-card-info--date o-card-info--date--announcement">@announcement.secondaryLabel</span>
			</div>
			<a href="@announcement.link.url" class="o-card-link"></a>
			<div class="o-card__actions">
				<a href="@announcement.link.url" class="o-button o-button--small o-button--transparent">@announcement.buttonText</a>
			</div>

		</article>
	}
}

@helper EventOld(dynamic item)
{
	var type = "";
	var ci = new System.Globalization.CultureInfo("en-GB");
	System.Threading.Thread.CurrentThread.CurrentCulture = ci;
	System.Threading.Thread.CurrentThread.CurrentUICulture = ci;
    var now = DateTime.Today;

	var eventId = item.Id;
	var imageId = item.tileImage.ToString();

	string imageUrl = ( imageId != "" ? Umbraco.Media( imageId ).GetCropUrl("umbracoFile", "gallery") : "" );

	var category = item.Parent().Name;
	var count = 0;
	var multidate = item.multidate;

	foreach( var date in multidate ){
	    count = count + 1;
	}

	int last = count - 1;

	<article class="o-card o-card--event o-card--image">
		<div class="o-card__image--wrap">
			@if( item.HasValue("tileImage") )
			{
				<img class="o-card__image" src="@imageUrl" alt="@item.Name"/>
			}

		</div>
		<div class="o-card__content">
			<span class="o-card-info o-card-info--category o-card-info--category--event">@category</span>
			<h3 class="o-card__heading o-card__heading--event">@item.title</h3>
			<span class="o-card-info o-card-info--date o-card-info--date--event">
                @if( multidate.ToString() != "" ){
                    <span class="o-info-block__field o-info-block__field--date">
                        @if( count > 1 ){
                            if( @DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM") != @DateTime.Parse( multidate[last].date.value.ToString()  ).ToString("d MMM") ){
                                @DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM") <span>-</span> @DateTime.Parse( multidate[last].date.value.ToString()  ).ToString("d MMM")
                            } else {
                                @DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM")
                            }
                        } else {
                            @DateTime.Parse( multidate[0].date.value.ToString()  ).ToString("d MMM")
                        }

                    </span>
                }
			</span>
		</div>
		<a href="@item.url" class="o-card-link"></a>
		<div class="o-card__actions o-card__actions--event">
			<a href="@item.Url#tickets" class="o-button o-button--small o-button--transparent">Buy tickets</a>
			<a href="@item.Url" class="o-button o-button--small o-button--transparent">More info</a>
		</div>

	</article>
}

@helper NewsArticleOld(dynamic item)
{
	var color = "bondi-blue";

	var imageId = item.thumbnail.ToString();
	string imageUrl = ( imageId != "" ? Umbraco.Media( imageId ).GetCropUrl("umbracoFile", "gallery") : "" );

	if( item.HasValue("color") )
	{
		color = item.color.ToLower().Replace(" ","-");
	}

	if( item.Name != "" )
	{
		<article class="o-card o-card--news o-card--fill">
			<div class="o-card__image--wrap @color">
				@if( item.HasValue("thumbnail") )
				{
					<img class="o-card__image" src="@imageUrl" alt="@item.Name"/>
				}
			</div>
			<div class="o-card__content">
				<span class="o-card-info--category o-card-info--category--news">News</span>
				<h3 class="o-card__heading o-card__heading--news delta">@(item.HasValue("postTitle") ? item.postTitle : item.Name)</h3>
				<span class="o-card-info--date o-card-info--date--news">@item.releaseDate.ToString("dd MMM")</span>
			</div>
			@if( item.DocumentTypeAlias == "InTheMedia" )
			{
				<a href="@item.articleUrl" target="_blank" class="o-card-link"></a>
				<div class="o-card__actions">
					<a href="@item.articleUrl" target="_blank" class="o-button o-button--small o-button--transparent">Read more</a>
				</div>
			}
			else
			{
				<a href="@item.Url" class="o-card-link"></a>
				<div class="o-card__actions">
					<a href="@item.Url" class="o-button o-button--small o-button--transparent">Read more</a>
				</div>
			}
		</article>
	}
}

@helper Default(dynamic item)
{

}

@helper Truncate (string input, int length)
{
    if( input.Length<=length )
    {
        @Html.Raw(input)
    }
    else{
        @Html.Raw( input.Substring( 0,length ) )<text>...</text>
    }
}
